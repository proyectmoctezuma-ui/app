/* ===============================
   Puzzle (tablero, guía, piezas)
   CSS Module anclado con .scope
   =============================== */

.scope { --_anchor: 1; }

/* ===== Wrapper del puzzle ===== */

.scope { --wrapBottomGap: clamp(12px, 4vh, 28px); }          /* desktop */
@media (max-width: 1023px) {
  .scope { --wrapBottomGap: clamp(12px, 6vh, 36px); }        /* móvil */
}

/* ====================================================================
   CORRECCIÓN: WRAPPER CON ALTURA COMPLETA SIN CORTES
   ==================================================================== */

/* Wrapper del puzzle: llena el área disponible de board-area */
.scope :global(#board-wrap) {
  width: 100%;
  height: calc(100% - var(--wrapBottomGap));
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: 1fr;
  place-items: start center;
  overflow: visible;
  padding-inline: max(10px, env(safe-area-inset-left, 0px));
  padding-bottom: max(var(--wrapBottomGap), env(safe-area-inset-bottom, 0px));
  box-sizing: border-box;
}

/* ====================================================================
   EN DESKTOP: ELIMINAR CORTES - ALTURA COMPLETA SIN PADDING CONFLICTIVO
   ==================================================================== */
@media (min-width: 1024px) {
  .scope :global(#board-wrap) {
    height: 100% !important;
    padding: 0 !important;
    place-items: center center;
    box-sizing: border-box;
    /* Asegurar que no haya overflow que cause cortes */
    overflow: hidden;
  }
}

/* Frame del board: ocupa todo el wrap y no recorta */
.scope :global(#board-frame) {
  position: relative;
  display: grid;
  align-content: start;
  justify-content: start;
  width: 100%;
  height: 100%;
  overflow: visible;
}

/* ====================================================================
   EN DESKTOP: CENTRADO PERFECTO Y ESPACIO COMPLETO
   ==================================================================== */
@media (min-width: 1024px) {
  .scope :global(#board-frame) {
    align-content: center;
    justify-content: center;
    height: 100%;
    /* Asegurar que el frame use todo el espacio disponible */
    width: 100%;
    max-width: 100%;
  }
}

/* ===== Board tamaño base; escalado por transform ===== */
.scope :global(.board) {
  position: absolute;
  top: 0; left: 0;
  width: calc(var(--cellW) * var(--cols));
  height: calc(var(--cellH) * var(--rows));
  transform-origin: top left;
  border-radius: 18px;
  background: #0000003b;
  border: 1px dashed rgba(255,255,255,0.08);
  overflow: visible; /* deja ver piezas fuera del marco */
}

/* ===== Guía (SVG) ===== */
.scope :global(#guide-grid) {
  position: absolute;
  inset: 0;
  z-index: 0;
  opacity: 0;
  transition: opacity var(--snap-duration, 260ms) ease;
  pointer-events: none;
}
.scope :global(.board.show-grid #guide-grid) { opacity: 1; }

.scope :global(#guide-grid .grid-lines) {
  stroke: var(--guide-color, rgba(255, 255, 255, 0.671));
  stroke-width: var(--guide-width, 2px);
  stroke-dasharray: 6 6;
  vector-effect: non-scaling-stroke;
}

.scope :global(.board.grid-strong #guide-grid .grid-lines) {
  stroke: var(--guide-color-strong, rgba(255,255,255,0.58));
  stroke-width: var(--guide-width-strong, 1.6px);
}

/* ===== Pieza ===== */
.scope :global(.piece) {
  position: absolute;
  width: var(--cellW);
  height: var(--cellH);
  border-radius: var(--piece-radius, 14px);
  overflow: hidden;
  user-select: none;
  touch-action: none;
  cursor: grab;
  transform-origin: 50% 50%;
  transform:
    translate(var(--tx, 0px), var(--ty, 0px))
    rotate(var(--rot, 0deg))
    scale(var(--scale-extra, 1));
  transition:
    transform var(--snap-duration, 260ms) ease,
    border-radius var(--snap-duration, 260ms) ease,
    opacity var(--fade-duration, 250ms) ease;
  z-index: 2;
  will-change: transform, opacity;
  backface-visibility: hidden;
}

.scope :global(.piece.locked) {
  cursor: default;
  z-index: 1;
}

.scope :global(.piece img) {
  width: 100%;
  height: 100%;
  object-fit: fill;  /* coincide con slicing exacto de assets */
  display: block;
  pointer-events: none;
}

/* Overlay per-piece (para "ocultar sueltas" y sombreado suave) */
.scope :global(.piece::after) {
  content: "";
  position: absolute;
  inset: 0;
  background: rgba(0,0,0,var(--overlay-alpha, 0.12));
  transition: background 300ms ease;
  pointer-events: none;
}

/* Arrastre */
.scope :global(.piece.dragging) {
  box-shadow: var(--shadow-elev, 0 10px 24px rgba(0,0,0,0.35));
  z-index: 999;
  cursor: grabbing;
}

/* Enfoque: oculta sueltas al arrastrar */
.scope :global(.board.focus-drag .piece:not(.dragging):not(.locked)) {
  opacity: 0;
  pointer-events: none;
}
.scope :global(.board.focus-drag .piece.dragging) {
  --scale-extra: var(--drag-scale, 1.06);
  opacity: 1;
  pointer-events: auto;
  z-index: 1000;
}

/* Pulse snap */
@keyframes game1SnapPulse {
  from { box-shadow: 0 0 0 0 rgba(122,168,255,0.6); }
  to   { box-shadow: 0 0 0 12px rgba(122,168,255,0); }
}
.scope :global(.piece.snap-pulse) {
  animation: game1SnapPulse 360ms ease-out 1;
}

/* ===== Debug grid (tecla 'D' en el runtime) ===== */
.scope :global(body.debug .board) {
  background-image:
    linear-gradient(rgba(122,168,255,0.12) 1px, transparent 1px),
    linear-gradient(90deg, rgba(122,168,255,0.12) 1px, transparent 1px);
  background-size: var(--cellH) var(--cellH), var(--cellW) var(--cellW);
}